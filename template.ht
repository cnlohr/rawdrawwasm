 <!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
		<meta name="viewport" content="width=device-width,initial-scale=1">
		<title>Test</title>
	</head>
	<body>
		<canvas width=500 height=500 id=canvas></canvas>
		<script>

var blob = atob('${BLOB}');
var memory = new WebAssembly.Memory({initial:2});
var HEAP8 = new Int8Array(memory.buffer);
var HEAPU8 = new Uint8Array(memory.buffer);
var HEAP16 = new Int16Array(memory.buffer);
var HEAPU16 = new Uint16Array(memory.buffer);
var HEAP32 = new Uint32Array(memory.buffer);
var HEAPU32 = new Uint32Array(memory.buffer);
var HEAPF32 = new Float32Array(memory.buffer);
var HEAPF64 = new Float64Array(memory.buffer);

let toUtf8Decoder = new TextDecoder( "utf-8" );
function toUTF8(ptr) {
	var len = 0|0; ptr |= 0;
	for( var i = ptr; HEAPU8[i] != 0; i++) len++;
	return toUtf8Decoder.decode(HEAPU8.subarray(ptr, ptr+len));
}

function rdColorToCSS( color )
{
	return "rgb( " + (color & 0xff) + ", " + ((color>>8) & 0xff) + ", " + ((color>>16) & 0xff) + " )";
}


var canvas = document.getElementById('canvas');
var ctx = canvas.getContext('2d');
var fullscreen = false;

let wasmExports;
const DATA_ADDR = 16; // Where the unwind/rewind data structure will live.
let sleeping = false;

const imports = {
	env: {

		CNFGTackSegment: (x1, y1, x2, y2) => {
			ctx.beginPath();
			ctx.moveTo(x1+0.5, y1+0.5);
			ctx.lineTo(x2+0.5, y2+0.5);
			ctx.stroke();
		},
		CNFGTackPixel : (x1, y1 ) => {
			ctx.fillRect(x1|0, y1|0,1,1);
		},
		CNFGTackRectangle : (x1, y1, x2, y2) => {
			x1 |= 0; y1 |= 0; x2 |= 0; y2 |= 0;
			ctx.fillRect(x1, y1, x2-x1, y2-y1);
		},
		CNFGColor : (color) => {
			var strcol = rdColorToCSS( color );
			ctx.strokeStyle = strcol;
			ctx.fillStyle = strcol;
		},
		CNFGSetup : (title,w,h ) => {
			document.title = toUTF8( title );
			canvas.width = w;
			canvas.height = h;
			ctx.imageSmoothingEnabled = false;
			fullscreen = false;
		},
		CNFGSetupFullscreen : (title,w,h ) => {
			document.title = toUTF8( title );
			canvas.width = w;
			canvas.height = h;
			ctx.imageSmoothingEnabled = false;
			document.style += "overflow: hidden; width=100%; height=100%";
			canvas.style = "position:absolute; top:0; left:0;"
			fullscreen = true;
		},
		CNFGClearFrameInternal: ( color ) => {
			ctx.fillStyle = rdColorToCSS( color );
			ctx.rect(0, 0, canvas.width, canvas.height);
			ctx.fill();
		},
		CNFGTackPoly: (vertices, numverts) => {
			var i = 0 | 0;
			numverts |= 0;
			vertices |= 0;
			if( numverts < 1 ) return;
			ctx.beginPath();
			ctx.moveTo(HEAP16[vertices>>1], HEAP16[(vertices>>1)+1] );
			vertices += 4;
			for( i = 1; i < numverts; i++ )
			{
				ctx.lineTo(HEAP16[vertices>>1], HEAP16[(vertices>>1)+1] );
				vertices += 4;
			}
			ctx.closePath();
			ctx.fill();
		},
		CNFGGetDimensions: (pw, ph) => {
			HEAP16[pw>>1] = canvas.width;
			HEAP16[ph>>1] = canvas.height;
		},
		CNFGHandleInput: () => {
		},
		CNFGSwapBuffers: () => {
			if (!sleeping) {
				// We are called in order to start a sleep/unwind.
				// Fill in the data structure. The first value has the stack location,
				// which for simplicity we can start right after the data structure itself.
				HEAP32[DATA_ADDR >> 2] = DATA_ADDR + 8;
				// The end of the stack will not be reached here anyhow.
				HEAP32[DATA_ADDR + 4 >> 2] = 1024;
				wasmExports.asyncify_start_unwind(DATA_ADDR);
				sleeping = true;
				// Resume after the proper delay.
				requestAnimationFrame(function() {
					if( fullscreen )
					{
						canvas.width = window.innerWidth;
						canvas.height = window.innerHeight;
					}

					wasmExports.asyncify_start_rewind(DATA_ADDR);
					// The code is now ready to rewind; to start the process, enter the
					// first function that should be on the call stack.
					wasmExports.main();
				});
			} else {
				// We are called as part of a resume/rewind. Stop sleeping.
				wasmExports.asyncify_stop_rewind();
				sleeping = false;
			}
		},
		Add1 : (i) => { return i+1; },
		sin : Math.sin,
		cos : Math.cos,
		tan : Math.tan,
		sinf : Math.sin,
		cosf : Math.cos,
		tanf : Math.tan,
		OGGetAbsoluteTime : () =>
		{
			return new Date().getTime()/1000.;
		},
		OGUSleep: (us) => {
			if (!sleeping) {
				// We are called in order to start a sleep/unwind.
				//console.log('sleep...');
				// Fill in the data structure. The first value has the stack location,
				// which for simplicity we can start right after the data structure itself.
				HEAP32[DATA_ADDR >> 2] = DATA_ADDR + 8;
				// The end of the stack will not be reached here anyhow.
				HEAP32[DATA_ADDR + 4 >> 2] = 1024;
				wasmExports.asyncify_start_unwind(DATA_ADDR);
				sleeping = true;
				// Resume after the proper delay.
				setTimeout(function() {
					wasmExports.asyncify_start_rewind(DATA_ADDR);
					// The code is now ready to rewind; to start the process, enter the
					// first function that should be on the call stack.
					wasmExports.main();
				}, us/1000);
			} else {
				// We are called as part of a resume/rewind. Stop sleeping.
				wasmExports.asyncify_stop_rewind();
				sleeping = false;
			}
		},
		memory: memory,
		print: console.log,
		draw: () => {},
		printc: (str, len) => { console.log(utf8decoder.decode(HEAPU8.subarray(str, str+len))) },
	}
};


	var array = new Uint8Array(new ArrayBuffer(blob.length));
	var i = 0|0;
	for(i = 0; i < blob.length; i++) {
		array[i] = blob.charCodeAt(i);
	}

	WebAssembly.instantiate(array, imports).then(
		function(wa) { 
			instance = wa.instance;
			wasmExports = instance.exports;
			instance.exports.main();
		 } );

		</script>
	</body>
</html>
